{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["NoQuotesFound","className","classes","noquotes","href","module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","loadedQuotes","match","useRouteMatch","message","path","exact","to","url"],"mappings":"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","file":"static/js/4.62b6e5c3.chunk.js","sourcesContent":["import classes from \"./NoQuotesFound.module.css\";\nimport React from \"react\"\n\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <a href=\"/new-quote\" className=\"btn\">\n        Add a Quote\n      </a>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1SUmS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2BHE-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3uHTb\",\"loading\":\"NewCommentForm_loading__1myoy\",\"control\":\"NewCommentForm_control__jU1Jr\",\"actions\":\"NewCommentForm_actions__1kTPl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1QrSk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1s2Sg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__11Mek\"};","import { useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport classes from \"./NewCommentForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport { useEffect } from \"react\";\nimport React from \"react\"\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId})};\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\nimport React from \"react\"\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\nimport React from \"react\"\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentsList from \"../comments/CommentsList\";\nimport React from \"react\"\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments found</p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={params.quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\nimport React from \"react\"\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams } from \"react-router-dom\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport {\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport React, { useEffect } from \"react\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport NoQuoteFound from \"../components/quotes/NoQuotesFound\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetail = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  const { quoteId } = params;\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error.message}</p>\r\n  }\r\n  if (!loadedQuotes.text) {\r\n    return <NoQuoteFound />;\r\n  }\r\n  return (\r\n    <section>\r\n      <HighlightedQuote text={loadedQuotes.text} author={loadedQuotes.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Show Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}`}>\r\n            Hide Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n    </section>\r\n  );\r\n};\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}