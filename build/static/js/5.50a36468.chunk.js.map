{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuote.js"],"names":["NoQuotesFound","className","classes","noquotes","href","module","exports","QuoteItem","props","item","text","author","to","id","QuoteList","location","useLocation","history","useHistory","isSortingAscending","URLSearchParams","search","get","console","log","quotes","ascending","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","AllQuote","useHttp","getAllQuotes","sendRequest","status","loadedQuote","data","error","useEffect","LoadingSpinner","length"],"mappings":"mIAAA,mCAeeA,IAXO,WACpB,OACE,sBAAKC,UAAWC,IAAQC,SAAxB,UACE,iDACA,mBAAGC,KAAK,aAAaH,UAAU,MAA/B,8B,mBCPNI,EAAOC,QAAU,CAAC,SAAW,kC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,wFCoB5CC,EAhBG,SAACC,GACjB,OACE,qBAAIP,UAAWC,IAAQO,KAAvB,UACE,mCACE,qCACE,4BAAID,EAAME,SAEZ,qCAAaF,EAAMG,YAErB,cAAC,IAAD,CAAMC,GAAE,kBAAaJ,EAAMK,IAAMZ,UAAU,MAA3C,iC,iBC2CSa,EAxCG,SAACN,GACjB,IAAMO,EAAWC,cACXC,EAAUC,cAEVC,EAAiD,QADnC,IAAIC,gBAAgBL,EAASM,QACVC,IAAI,QAC3CC,QAAQC,IAAIT,GACZQ,QAAQC,IAAIL,GAEZ,IAlBiBM,EAAQC,EAkBnBC,GAlBWF,EAkBcjB,EAAMiB,OAlBZC,EAkBoBP,EAjBtCM,EAAOG,MAAK,SAACC,EAAQC,GAC1B,OAAIJ,EACKG,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,EAE7BgB,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,MAwBxC,OACE,eAAC,WAAD,WACE,qBAAKZ,UAAWC,IAAQ6B,QAAxB,SACE,yBAAQC,QAbe,WAK3Bf,EAAQgB,KAAK,CACXC,SAAUnB,EAASmB,SACnBb,OAAO,SAAD,OAAWF,EAAqB,OAAS,UAM7C,kBACQA,EAAqB,aAAe,iBAG9C,oBAAIlB,UAAWC,IAAQiC,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEExB,GAAIwB,EAAMxB,GACVF,OAAQ0B,EAAM1B,OACdD,KAAM2B,EAAM3B,MAHP2B,EAAMxB,a,gCCLRyB,UAjCE,WACf,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MASF,OANAC,qBAAU,WACRL,MACC,CAACA,IAEJlB,QAAQC,IAAI,WAEG,YAAXkB,EAEA,qBAAKzC,UAAU,WAAf,SACE,cAAC8C,EAAA,EAAD,MAKFF,EACK,mBAAG5C,UAAU,mBAAb,SAAiC4C,IAG3B,cAAXH,GAA4BC,GAAsC,IAAvBA,EAAYK,OAIpD,cAAC,EAAD,CAAWvB,OAAQkB,IAHf,cAAC3C,EAAA,EAAD","file":"static/js/5.50a36468.chunk.js","sourcesContent":["import classes from \"./NoQuotesFound.module.css\";\nimport React from \"react\"\n\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <a href=\"/new-quote\" className=\"btn\">\n        Add a Quote\n      </a>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1SUmS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__3nc0X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__4894m\",\"sorting\":\"QuoteList_sorting__2dfYq\"};","import { Link } from \"react-router-dom\";\nimport classes from \"./QuoteItem.module.css\";\nimport React from \"react\"\n\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport React from \"react\"\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\nconst sortQuote = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const location = useLocation();\n  const history = useHistory();\n  const queryParams = new URLSearchParams(location.search);\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n  console.log(location);\n  console.log(isSortingAscending);\n\n  const sortedQuotes = sortQuote(props.quotes, isSortingAscending);\n  const changeSortingHandler = () => {\n    // history.push(\n    //   `${location.pathname}?sort=${isSortingAscending ? \"desc\" : \"asc\"}`\n    // );\n    //  more readable code\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isSortingAscending ? \"desc\" : \"asc\"}`,\n    });\n  };\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import React from \"react\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\r\nimport { useEffect } from \"react\";\r\n\r\nconst AllQuote = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  console.log(\"|kpkpok\")\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (status === \"completed\" && (!loadedQuote || loadedQuote.length === 0)) {\r\n      return <NoQuotesFound></NoQuotesFound>\r\n  }\r\n\r\n  return <QuoteList quotes={loadedQuote} />;\r\n};\r\n\r\nexport default AllQuote;\r\n"],"sourceRoot":""}